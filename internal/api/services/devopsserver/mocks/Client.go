// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Do provides a mock function with given fields: req
func (_m *Client) Do(req *http.Request) ([]byte, error) {
	ret := _m.Called(req)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*http.Request) []byte); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoGet provides a mock function with given fields: url
func (_m *Client) DoGet(url string) ([]byte, error) {
	ret := _m.Called(url)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoPost provides a mock function with given fields: url, data
func (_m *Client) DoPost(url string, data interface{}) ([]byte, error) {
	ret := _m.Called(url, data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}) []byte); ok {
		r0 = rf(url, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(url, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t NewClientT) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
