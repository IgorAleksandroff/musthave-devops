// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	metricscollectionentity "github.com/IgorAleksandroff/musthave-devops/internal/metricscollectionentity"
	mock "github.com/stretchr/testify/mock"
)

// MetricsCollection is an autogenerated mock type for the MetricsCollection type
type MetricsCollection struct {
	mock.Mock
}

// GetMetric provides a mock function with given fields: name
func (_m *MetricsCollection) GetMetric(name string) (*metricscollectionentity.Metrics, error) {
	ret := _m.Called(name)

	var r0 *metricscollectionentity.Metrics
	if rf, ok := ret.Get(0).(func(string) *metricscollectionentity.Metrics); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metricscollectionentity.Metrics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricsValue provides a mock function with given fields:
func (_m *MetricsCollection) GetMetricsValue() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *MetricsCollection) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCounterMetric provides a mock function with given fields: value
func (_m *MetricsCollection) SaveCounterMetric(value metricscollectionentity.Metrics) {
	_m.Called(value)
}

// SaveMetric provides a mock function with given fields: value
func (_m *MetricsCollection) SaveMetric(value metricscollectionentity.Metrics) {
	_m.Called(value)
}

// SaveMetrics provides a mock function with given fields: metrics
func (_m *MetricsCollection) SaveMetrics(metrics []metricscollectionentity.Metrics) {
	_m.Called(metrics)
}

type NewMetricsCollectionT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetricsCollection creates a new instance of MetricsCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetricsCollection(t NewMetricsCollectionT) *MetricsCollection {
	mock := &MetricsCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
