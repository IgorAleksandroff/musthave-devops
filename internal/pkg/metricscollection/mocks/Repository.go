// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/IgorAleksandroff/musthave-devops/internal/pkg/metricscollection/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FlushMemo provides a mock function with given fields:
func (_m *Repository) FlushMemo() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMetric provides a mock function with given fields: name
func (_m *Repository) GetMetric(name string) (*entity.Metrics, error) {
	ret := _m.Called(name)

	var r0 *entity.Metrics
	if rf, ok := ret.Get(0).(func(string) *entity.Metrics); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Metrics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields:
func (_m *Repository) GetMetrics() map[string]entity.Metrics {
	ret := _m.Called()

	var r0 map[string]entity.Metrics
	if rf, ok := ret.Get(0).(func() map[string]entity.Metrics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entity.Metrics)
		}
	}

	return r0
}

// SaveMetric provides a mock function with given fields: value
func (_m *Repository) SaveMetric(value entity.Metrics) {
	_m.Called(value)
}

type NewRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t NewRepositoryT) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
