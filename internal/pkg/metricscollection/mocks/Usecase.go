// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/IgorAleksandroff/musthave-devops/internal/pkg/metricscollection/entity"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetMetric provides a mock function with given fields: name
func (_m *Usecase) GetMetric(name string) (*entity.Metrics, error) {
	ret := _m.Called(name)

	var r0 *entity.Metrics
	if rf, ok := ret.Get(0).(func(string) *entity.Metrics); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Metrics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricsValue provides a mock function with given fields:
func (_m *Usecase) GetMetricsValue() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// SaveCounterMetric provides a mock function with given fields: value
func (_m *Usecase) SaveCounterMetric(value entity.Metrics) {
	_m.Called(value)
}

// SaveMetric provides a mock function with given fields: value
func (_m *Usecase) SaveMetric(value entity.Metrics) {
	_m.Called(value)
}

type NewUsecaseT interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t NewUsecaseT) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
